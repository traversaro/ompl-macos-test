name: condaforge

on:
  push:
  pull_request:

jobs:
  build:
    name: '[condaforge@clang:${{ matrix.clang_version }}@boost:${{ matrix.boost_version }}@${{ matrix.os }}@BuildType:${{ matrix.build_type }}]'
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        boost_version: ["1.82", "1.84", "1.86"]
        clang_version: [14, 15, 16, 17]
        libcxx_version: [14, 15, 16, 17, 18, 19]
        build_type: [Release, Debug]
        os: [macos-12, macos-14]

    steps:
    - uses: actions/checkout@v4

    - uses: conda-incubator/setup-miniconda@v3
      with:
        miniforge-version: latest

    - name: Set platform [macos-12]
      if: contains(matrix.os, 'macos-12')
      shell: bash -el {0}
      run: |
        echo "CONDA_PLATFORM=osx-64" >> "$GITHUB_ENV"

    - name: Set platform [macos-14]
      if: contains(matrix.os, 'macos-14')
      shell: bash -el {0}
      run: |
        echo "CONDA_PLATFORM=osx-arm64" >> "$GITHUB_ENV"

    - name: Install dependencies and source code
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: bash -el {0}
      run: |
        conda install libboost-devel==${{ matrix.boost_version }}.* python numpy cmake ld64 llvm-openmp cctools clangxx_${CONDA_PLATFORM}==${{ matrix.clang_version }}.* clang_${CONDA_PLATFORM}==${{ matrix.clang_version }}.* libcxx==${{ matrix.libcxx_version }}.* pkg-config make ninja eigen flann libode
        git clone https://github.com/ompl/ompl

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash -el {0}
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"


    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      shell: bash -el {0}
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -S ${{ github.workspace }}/ompl -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      shell: bash -el {0}
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
    - name: Test
      shell: bash -el {0}
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure --build-config ${{ matrix.build_type }}
